/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MiniCV1.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(MiniC)
package miniC;
import util.*;

public class MiniC/*@bgen(jjtree)*/implements MiniCTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTMiniCState jjtree = new JJTMiniCState();

/*@egen*/
  QTList qtList = new QTList();
  VariableNameGenerator variableNameGenerator = new VariableNameGenerator();
  
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    MiniC parser = new MiniC(System.in);
    try
    {
      SimpleNode n = parser.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(MiniC)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
  >
| < FLOAT_LITERAL :
    [ "1"-"9" ] ([ "0"-"9" ])*
    (
      "." ([ "0"-"9" ])*
    )? >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN :
{
  < INT : "int" >
| < WHILE : "while" >
| < VOID : "void" >
| < FLOAT : "float" >
| < BOOL : "bool" >
| < DOUBLE : "double" >
| < FOR : "for" >
| < IF : "if" >
| < ELSE : "else" >
| < RETURN : "return" >
| < MAIN : "main" >
| < CHAR : "char" >
| < TRUE : "true" >
| < FALSE : "false" >
| < DO : "do" >
| < SWITCH :"switch">
| < CASE:"case">
| < DEFAULTT : "default" >
| < BREAK : "break" >
}

TOKEN : /*charSet*/
{
  < LB : "(" >
| < RB : ")" >
| < LS : "{" >
| < RS : "}" >
}

TOKEN : /*Operator*/
{
  < ADD : "+" >
| < SUB : "-" >
| < MULT : "*" >
| < DIV : "/" >
| < MOD : "%" >
| < EQ : "=" >
}

TOKEN : /*logicOperator*/
{
  < AND : "&&" >
| < OR : "||" >
| < UN : "!" >
}

TOKEN : /*RelationChar*/
{
  < LESS : "<" >
| < LESSN : "<=" >
| < GREAT : ">" >
| < GREATN : ">=" >
| < EQU : "==" >
| < NOTEQU : "!=" >
}

TOKEN :
{
  < COMMA : "," >
| < SEMIC : ";" >
| < COLON:":" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  program()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u7a0b\u5e8f
void program():
{/*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program */
  try {
/*@egen*/
  < INT ><MAIN >< LB><RB ><LS >
  (
    StatementBlocks()
  )*
  < RETURN > Integer() < SEMIC >
  < RS >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Statement() :
{/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  SeqStatement()
| CondStatement()
| LoopStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StatementBlocks() : //\u8bed\u53e5\u5757
{/*@bgen(jjtree) StatementBlocks */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCKS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StatementBlocks */
 try {
/*@egen*/
 Statement()
|
    < LS >
    (
      StatementBlocks()
    )*
    < RS >/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void SeqStatement() : //\u987a\u5e8f\u8bed\u53e5
{/*@bgen(jjtree) SeqStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SeqStatement */
  try {
/*@egen*/
  (
  (
    DeclarStatement()
  | AssignStatement()
  )
  < SEMIC >
)
| SwitchCase()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DeclarStatement() : //\u58f0\u660e\u8bed\u53e5
{/*@bgen(jjtree) DeclarStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeclarStatement */
  try {
/*@egen*/
  DeclarKey() 
  Identifier()
  (
    < COMMA >
    Identifier()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssignStatement() : //\u8d4b\u503c\u8bed\u53e5
{/*@bgen(jjtree) AssignStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token op;
  Token first;
  String exp;
}
{/*@bgen(jjtree) AssignStatement */
    try {
/*@egen*/
    first = Identifier()
    op = < EQ >
    exp = Expression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      QTInfo qt = new QTInfo(op.image, exp, "_", first.image);
      qtList.addQTInfo(qt);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CondStatement() : //\u6761\u4ef6\u8bed\u53e5
{/*@bgen(jjtree) CondStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue chain = new ConditionValue();
  ConditionValue temp = new ConditionValue();
  int i;
}
{/*@bgen(jjtree) CondStatement */
  try {
/*@egen*/
  < IF > < LB >
  chain = Logic()
  < RB >
  {	
    i = QTInfo.size + 1;
    chain.backpatchTrueChain(i);
  }
  StatementBlocks()
  {
    QTInfo qt = new QTInfo("J", "_", "_", "N");
    temp.mergeTrue(qt);
    qtList.addQTInfo(qt);
    i = QTInfo.size + 1;
    chain.backpatchFalseChain(i);
  }
  (
    LOOKAHEAD(1)
    < ELSE >
    StatementBlocks()
    {
      i = QTInfo.size + 1;
      temp.backpatchTrueChain(i);
    }
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue Logic() : //\u903b\u8f91\u6216
{/*@bgen(jjtree) Logic */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int seq = 0;
  int tag = 0;
  ConditionValue chain = new ConditionValue();
  ConditionValue resChain = new ConditionValue();
  ConditionValue chain2 = new ConditionValue();
}
{/*@bgen(jjtree) Logic */
  try {
/*@egen*/
  chain = LogicAnd()
  (
    < OR >
    {
      tag = 1;
      seq = QTInfo.size + 1;
      chain.backpatchFalseChain(seq);
    }
    chain2 = LogicAnd()
    {
      resChain = new ConditionValue();
      resChain.mergeFalse(chain2);
      chain2.mergeTrue(chain);
      resChain.mergeTrue(chain2);
      chain = resChain;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (tag == 0) 
    	return chain;
    else 
    	return resChain;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue LogicAnd() : //\u903b\u8f91\u4e0e
{/*@bgen(jjtree) LogicAnd */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int seq = 0;
  int tag = 0;
  ConditionValue chain = new ConditionValue();
  ConditionValue resChain = new ConditionValue();
  ConditionValue chain2 = new ConditionValue();
}
{/*@bgen(jjtree) LogicAnd */
  try {
/*@egen*/
  chain = LogicNot()
  (
    < AND >
    {
      tag = 1;
      seq = QTInfo.size + 1;
      chain.backpatchTrueChain(seq);
    }
    chain2 = LogicNot()
    {
      resChain = new ConditionValue();
      resChain.mergeTrue(chain2);
      chain2.mergeFalse(chain);
      resChain.mergeFalse(chain2);
      chain = resChain; 
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (tag == 0) 
    	return chain;
    else 
    	return resChain;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue LogicNot() : //\u903b\u8f91\u975e
{/*@bgen(jjtree) LogicNot */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue chain = new ConditionValue();
  ConditionValue chain1 = new ConditionValue();
}
{/*@bgen(jjtree) LogicNot */
  try {
/*@egen*/
  (
    chain = Condition()
  |
    (
      < UN >
      chain1 = Condition()
      {
        chain.FalseMergeTrue(chain1);
        chain.TrueMergeFalse(chain1);
      }
    )
  )+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
      return chain;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


ConditionValue Condition() : //\u6761\u4ef6
{/*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int tag = 0;
  String first;
  String middle;
  String rop;
  ConditionValue chain = new ConditionValue();
}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  first = Expression()
  (
    rop = RelationChar() 
    middle = Expression()
    {
      QTInfo qt1 = new QTInfo("J" + rop, first, middle, "N");
      QTInfo qt2 = new QTInfo("J", "_", "_", "N");
      chain.mergeTrue(qt1);
      chain.mergeFalse(qt2);
      qtList.addQTInfo(qt1);
      qtList.addQTInfo(qt2);
      tag = 1;
    }
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
      if(tag == 0)
      {
          QTInfo qt1 = new QTInfo("JNZ", first, "_", "N");
	      QTInfo qt2 = new QTInfo("J", "_", "_", "N");
	      chain.mergeTrue(qt1);
	      chain.mergeFalse(qt2);
	      qtList.addQTInfo(qt1);
	      qtList.addQTInfo(qt2);
      }
      return chain;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LoopStatement() : //\u5faa\u73af\u8bed\u53e5
{/*@bgen(jjtree) LoopStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LoopStatement */
  try {
/*@egen*/
  (
    While()
  | Do_While()
  | For_Loop()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void While() : //\u5faa\u73af\u8bed\u53e5
{/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int seq = 0, tag;
  ConditionValue chain;
  ConditionValue temp = new ConditionValue();
}
{/*@bgen(jjtree) While */
  try {
/*@egen*/
  < WHILE >
  < LB >
  {
    tag = qtList.QTList.size() + 1;
  }
  chain = Logic() 
  < RB >
  < LS >
  {
    seq = QTInfo.size + 1;
    chain.backpatchTrueChain(seq);
  }
  (
    StatementBlocks()
  )*
  < RS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    QTInfo qt = new QTInfo("J", "_", "_", Integer.toString(tag));
    qtList.addQTInfo(qt);
    seq = QTInfo.size + 1;
    chain.backpatchFalseChain(seq);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Do_While() :
{/*@bgen(jjtree) Do_While */
  SimpleNode jjtn000 = new SimpleNode(JJTDO_WHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int tag,now;
  ConditionValue chain;
}
{/*@bgen(jjtree) Do_While */
  try {
/*@egen*/
  < DO >
  < LS >
  {
    tag = qtList.QTList.size() + 1;
  }
  (
    StatementBlocks()
  )*
  < RS >
  < WHILE >
  < LB >
  chain = Logic()
  {
    now = QTInfo.size + 1;
    chain.backpatchTrueChain(tag);
    chain.backpatchFalseChain(now);
  }
  < RB >
  < SEMIC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void For_Loop() :
{/*@bgen(jjtree) For_Loop */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR_LOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int id1=-1,id2=-1,id3=-1,now=-1,add=-1,flag1=0,flag2=0;
  ConditionValue chain = new ConditionValue();
}
{/*@bgen(jjtree) For_Loop */
  try {
/*@egen*/
  < FOR >
  < LB >
  (
    AssignStatement()
  )?
  < SEMIC >
  (
    {
      id1 = qtList.QTList.size() + 1;
    }
    {
      flag1 = 1;
    }
    chain = Logic()
  )?
  {
      if(flag1==0)
      {
        add = qtList.QTList.size();
        QTInfo qt = new QTInfo("J", "_", "_", "N");
		qtList.addQTInfo(qt);
      }
  }
  < SEMIC >
  {
    id2 = qtList.QTList.size() + 1;
  }
  (
    {
      flag2 = 1;
    }
    AssignStatement()
    {
        if(flag1==1)
	    {
	        QTInfo qt = new QTInfo("J", "_", "_", Integer.toString(id1));
		    qtList.addQTInfo(qt);
	    }
    }
  )?
  {
    if(flag1==1)
    {
        now = QTInfo.size + 1;
	    chain.backpatchTrueChain(now);
    }
    id3 = qtList.QTList.size() + 1;
  }
  < RB >
  {
    now = QTInfo.size + 1;
    if(flag1==0&&flag2==1)
    {
        QTInfo temp = qtList.get(add);
        temp.setResult(now);
        qtList.set(add,temp);
    }
  }
  StatementBlocks()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(flag2==1)
    {
        QTInfo qt = new QTInfo("J", "_", "_", Integer.toString(id2));
	    qtList.addQTInfo(qt);
	    now = QTInfo.size + 1;
	    chain.backpatchFalseChain(now);
    }
    else if(flag1==1)
    {
        QTInfo qt = new QTInfo("J", "_", "_", Integer.toString(id1));
	    qtList.addQTInfo(qt);
	    now = QTInfo.size + 1;
	    chain.backpatchFalseChain(now);
    }
    else
    {
        QTInfo qt = new QTInfo("J", "_", "_", Integer.toString(id3));
	    qtList.addQTInfo(qt);
	    now = QTInfo.size + 1;
	    chain.backpatchFalseChain(now);
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SwitchCase()://switch-case
{/*@bgen(jjtree) SwitchCase */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t,t1;
  ConditionValue chain = new ConditionValue();
  int flag=0,tag=0,now=0;
}
{/*@bgen(jjtree) SwitchCase */
  try {
/*@egen*/
  < SWITCH >
  < LB >
  t = Identifier()
  < RB >
  < LS >
  (
    < CASE >
    t1 = < INTEGER_LITERAL >
    {
      now = QTInfo.size + 3;
      QTInfo qt1 = new QTInfo("J==", t.image, t1.image, now);
      QTInfo qt2 = new QTInfo("J", "_", "_", "N");
      //chain.mergeTrue(qt1);
      chain.mergeFalse(qt2);
      qtList.addQTInfo(qt1);
      qtList.addQTInfo(qt2);
    }
    < COLON >
    {
        now = QTInfo.size + 1;
	    chain.backpatchTrueChain(now);
    }
    StatementBlocks()
  )*
  (
    < DEFAULTT > 
    < COLON >
    {
      flag = 1;
      tag = qtList.QTList.size() + 1;
    }
    StatementBlocks()
  )?
  {
    if(flag==0)
    	tag = qtList.QTList.size() + 1;
    chain.backpatchFalseChain(tag);
  }
  < RS >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Expression() :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String exp;
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  exp = AdditiveExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return exp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String AdditiveExpression() :
{/*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first;
  String middle;
  String newTemp;
  Token op;
}
{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/
  first = MultiplicativeExpression()
  {
    newTemp = first;
  }
  (
    (
      op = "+"
    | op = "-"
    )
    middle = MultiplicativeExpression()
    {
      newTemp = variableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);
      qtList.addQTInfo(qt);
      first = newTemp;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String MultiplicativeExpression() :
{/*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first;
  String middle;
  String newTemp;
  Token op;
}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/
  first = UnaryExpression()
  {
    newTemp = first;
  }
  (
    (
      op = "*"
    | op = "/"
    | op = "%"
    )
    middle = UnaryExpression()
    {
      newTemp = variableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);
      qtList.addQTInfo(qt);
      first = newTemp;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String UnaryExpression() :
{/*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String exp;
  Token t;
}
{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/
  (
    
  "("
  exp = Expression()
  ")"
| t = Identifier()
  {
      exp = t.image;
  }
| t = Integer()
  {
      exp = t.image;
  }
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return exp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Identifier() :
{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Integer() :
{/*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t = < INTEGER_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Float() :
{/*@bgen(jjtree) Float */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Float */
  try {
/*@egen*/
  t = < FLOAT_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token StartKey() :
{/*@bgen(jjtree) StartKey */
  SimpleNode jjtn000 = new SimpleNode(JJTSTARTKEY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) StartKey */
  try {
/*@egen*/
  (
    t = < VOID >
  | t = < INT >
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token DeclarKey() :
{/*@bgen(jjtree) DeclarKey */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARKEY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) DeclarKey */
  try {
/*@egen*/
  (
    t = < INT >
  | t = < FLOAT >
  | t = < CHAR >
  | t = < DOUBLE >
  | t = < BOOL >
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String RelationChar() : //\u5173\u7cfb\u7b26
{/*@bgen(jjtree) RelationChar */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONCHAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) RelationChar */
  try {
/*@egen*/
  (
    t = < LESS >
  | t = < LESSN >
  | t = < GREAT >
  | t = < GREATN >
  | t = < EQU >
  | t = < NOTEQU >
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
