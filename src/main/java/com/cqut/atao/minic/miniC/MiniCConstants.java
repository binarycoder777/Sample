package com.cqut.atao.minic.miniC;/* Generated By:JJTree&JavaCC: Do not edit this line. MiniCConstants.java */



/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MiniCConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 8;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 9;
  /** RegularExpression Id. */
  int HEX_LITERAL = 10;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 11;
  /** RegularExpression Id. */
  int INT = 12;
  /** RegularExpression Id. */
  int WHILE = 13;
  /** RegularExpression Id. */
  int VOID = 14;
  /** RegularExpression Id. */
  int FLOAT = 15;
  /** RegularExpression Id. */
  int BOOL = 16;
  /** RegularExpression Id. */
  int DOUBLE = 17;
  /** RegularExpression Id. */
  int FOR = 18;
  /** RegularExpression Id. */
  int IF = 19;
  /** RegularExpression Id. */
  int ELSE = 20;
  /** RegularExpression Id. */
  int RETURN = 21;
  /** RegularExpression Id. */
  int MAIN = 22;
  /** RegularExpression Id. */
  int CHAR = 23;
  /** RegularExpression Id. */
  int TRUE = 24;
  /** RegularExpression Id. */
  int FALSE = 25;
  /** RegularExpression Id. */
  int DO = 26;
  /** RegularExpression Id. */
  int SWITCH = 27;
  /** RegularExpression Id. */
  int CASE = 28;
  /** RegularExpression Id. */
  int DEFAULTT = 29;
  /** RegularExpression Id. */
  int BREAK = 30;
  /** RegularExpression Id. */
  int LB = 31;
  /** RegularExpression Id. */
  int RB = 32;
  /** RegularExpression Id. */
  int LS = 33;
  /** RegularExpression Id. */
  int RS = 34;
  /** RegularExpression Id. */
  int ADD = 35;
  /** RegularExpression Id. */
  int SUB = 36;
  /** RegularExpression Id. */
  int MULT = 37;
  /** RegularExpression Id. */
  int DIV = 38;
  /** RegularExpression Id. */
  int MOD = 39;
  /** RegularExpression Id. */
  int EQ = 40;
  /** RegularExpression Id. */
  int AND = 41;
  /** RegularExpression Id. */
  int OR = 42;
  /** RegularExpression Id. */
  int UN = 43;
  /** RegularExpression Id. */
  int LESS = 44;
  /** RegularExpression Id. */
  int LESSN = 45;
  /** RegularExpression Id. */
  int GREAT = 46;
  /** RegularExpression Id. */
  int GREATN = 47;
  /** RegularExpression Id. */
  int EQU = 48;
  /** RegularExpression Id. */
  int NOTEQU = 49;
  /** RegularExpression Id. */
  int COMMA = 50;
  /** RegularExpression Id. */
  int SEMIC = 51;
  /** RegularExpression Id. */
  int COLON = 52;
  /** RegularExpression Id. */
  int IDENTIFIER = 53;
  /** RegularExpression Id. */
  int LETTER = 54;
  /** RegularExpression Id. */
  int DIGIT = 55;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<FLOAT_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "\"int\"",
    "\"while\"",
    "\"void\"",
    "\"float\"",
    "\"bool\"",
    "\"double\"",
    "\"for\"",
    "\"if\"",
    "\"else\"",
    "\"return\"",
    "\"main\"",
    "\"char\"",
    "\"true\"",
    "\"false\"",
    "\"do\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"break\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
